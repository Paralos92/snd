
> nami-utils@0.2.1 test /home/bitnami/projects/nami/github/nami-utils
> gulp test

[10:38:40] Using gulpfile ~/projects/nami/github/nami-utils/gulpfile.js
[10:38:40] Starting 'test'...
[10:38:40] Starting 'test:clean'...
[10:38:40] Finished 'test' after 21 ms
[10:38:40] Finished 'test:clean' after 26 ms
[10:38:40] Starting 'test:prepare'...
[10:38:40] Finished 'test:prepare' after 663 ms
[10:38:40] Starting 'test:execute'...


  Common
    #getInheritanceChain()
      ✓ returns an empty array for objects, functions and undefined values
      ✓ correctly returns the inheritance chain for an object

  $crypt package
    #rand()
      ✓ Generates unique values
      ✓ Generates 32 char values by default
      ✓ Generates values with the given size
      ✓ Can generate ascii values
      ✓ Can generate alphanumeric values
      ✓ Can generate numeric-only strings
    Hashes from hardcoded values
      Compare hashes with hardcoded values
        ✓ Validate md5() from stored text
        ✓ Validate sha512() from stored text
        ✓ Validate sha256() from stored text
        ✓ Validate sha1() from stored text
        ✓ Validate base64() from stored text
      #hmac()
        ✓ Get 'asdf' hmac with md5 algorithm
        ✓ Get 'asdf' hmac with sha1 algorithm
        ✓ Get 'asdf' hmac with sha256 algorithm
        ✓ Get 'asdf' hmac with sha512 algorithm

  Delegation
    #delegate()
      ✓ Delegation of existing methods work
      ✓ Delegation properly sets the context (this)
      ✓ Delegation of attributes work
      ✓ Delegation of methods preserve arguments
      ✓ Delegate one attribute as string
      ✓ Delegate hash of attributes
      ✓ Delegate with output filter
      ✓ Delegated attributes inherit enumerable property

  $file pkg
    $file package non-contextified
      #link()
        ✓ Creates link to absolute paths
        ✓ Creates link to relative paths
        ✓ Creates broken links to absolute paths
        ✓ Creates broken links to relative paths
      #delete()
        ✓ Deletes individual files
        ✓ Deletes directories
        ✓ Do not delete directories if told not to
        ✓ Do not delete non-empty directories if told not to
        ✓ Returns true when the path was deleted and false otherwise
        ✓ Supports providing a list
        ✓ Supports providing patterns
        ✓ Allows deleting files with literal regexp-like characters
        ✓ When providing multiple patterns, only returns true if all were deleted
      #read()
        ✓ Reads files
      #write()
        ✓ Writes files
        ✓ Write file under non-existent dir (86ms)
      #substitute()
        ✓ Substitutes exact patterns, 1st way
        ✓ Substitutes exact patterns, 2nd way
        ✓ Substitutes exact patterns, 3rd way
        ✓ Substitutes exact patterns with global matching, 1st way
        ✓ Substitutes exact patterns with global matching, 2nd way
        ✓ Substitutes exact patterns with global matching, 3rd way
        ✓ Substitutes exact patterns recursively, 1st way
        ✓ Substitutes exact patterns recursively, 2nd way
        ✓ Substitutes exact patterns recursively, 3rd way
        ✓ Substitutes regexp patterns, 1st way
        ✓ Substitutes regexp patterns, 3rd way
        ✓ Substitutes regexp patterns recursively, 1st way
        ✓ Substitutes regexp patterns recursively, 3rd way
        ✓ Only follows symlinks in a directory if followSymLinks is true
        ✓ Allows excluding files from the substitutions
        ✓ Raises an error when wrong syntax is used
        Supports configuring the 'global' attribute
          ✓ $file.substitute(file, pattern, value) form
          ✓ $file.substitute(file, {a: b}) form
          ✓ $file.substitute(file, [{pattern: a, value: b}]) form
      #relativize()
        ✓ Relativizes a path within a given prefix
      #sanitize()
        ✓ Sanitizes a path, converting it into an unix-like path
      #listDir()
        ✓ Lists the directory content as Unix's `find` would do
        ✓ Lists the directory content, removing the prefix
      #glob()
        ✓ Lists the directory content matching a glob-like pattern
        ✓ Allows excluding files from the results
        ✓ Lists the directory content matching a glob-like pattern, changing the working directory
        ✓ Lists the directory content matching multiple glob-like patterns
      #append()
        ✓ Appends text to existing files
        ✓ Appends text to existing files, with newline
        ✓ Appends text to non-existing files
      #prepend()
        ✓ Prepends text to existing files
        ✓ Prepends text to non-existing files
      #puts()
        ✓ Appends text to existing files with trailing newline
        ✓ Appends text to existing files, with newline before and after
        ✓ Appends text to non-existing files with trailing newline
      #stripPath()
        ✓ Returns the path removing "n" parent path elements.
      #walkDir()
        ✓ Navigate through directory contents
        ✓ Allows early-aborting listing contents
        ✓ The loop is only aborted if maxDepth is reached
        ✓ The loop is only aborted for a exact 'false' boolean value
      File access checks
        #executable()
          ✓ Checks if a file is executable by the current user.
          ✓ Returns false for non-existent files
        #executableBy()
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
          ✓ Checks if a file is executable by a different user. (72ms)
          ✓ Returns false for non-existent files
          ✓ Properly checks if root has access
        #executableByOthers()
          ✓ Checks if a file is executable by "others"
          ✓ Returns false for non-existent files
        #readable()
          ✓ Checks if a file is readable by the current user.
          ✓ Checks if a file is not readable by the current user.
        #readableBy()
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
          ✓ Checks if a file is readable by a different user (50ms)
        #readableByOthers()
          ✓ Checks if a file is readable by "others"
        #writable()
          ✓ Checks if a file is writable by the current user.
          ✓ Checks if a file is not writable by the current user.
          ✓ Checks the parent directory if it does not exists
        #writableBy()
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
          ✓ Checks if a file is writable by a different user (69ms)
          ✓ Root can always write
          ✓ Properly checks if writable by the current user
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
          ✓ Checks the parent directory if it does not exists
        #writableByOthers()
          ✓ Checks if a file is writable by "others"
      #exists()
        ✓ Checks if a file exists.
        ✓ Checks if a file does not exist.
        ✓ Throws an error if cannot detect if exists or not
      #size()
        ✓ Gets the size of a given file.
      #matches()
        ✓ Checks if file path matches a pattern
        ✓ Checks if file path matches excluding pattern
        ✓ Checks if file path matches a pattern (relative path works)
        ✓ Properly resolves different glob matching patters
      #dirname()
        ✓ Gets the parent directory of a specified file/directory.
      #basename()
        ✓ Gets the basename of a file.
      #touch()
        ✓ Creates empty file if it does not exist.
        ✓ Modifies the access/modification time of a file. (2004ms)
      #split()
        ✓ Gets an array with the elements in the path.
      #join()
        ✓ Gets path from an array of components
        ✓ Gets path from an list of arguments
      #mkdir()
        ✓ Create directory if it does not exist.
        ✓ Throws an error if the path exists and it is a file.
      #normalize()
        ✓ Absolutizes a relative path, expanding the "~" character
      #isLink()
        ✓ Detects if a file is a symbolic link.
        ✓ Detects if a file is not a symbolic link.
      #isDirectory()
        ✓ Detects if a given path is a directory.
        ✓ Detects if a given path is a not a directory.
      #isFile()
        ✓ Detects if a given path is a file.
        ✓ Detects if a given path is not a file.
      #isBinary()
        ✓ Detects if a given file is binary.
        ✓ Detects if a file is not binary.
      #contains()
        ✓ Detects if the content of a file contains a given string.
        ✓ Detects if the content of a file does not contain a given string.
        ✓ Detects if the content of a file matches a given regular expression.
        ✓ Detects if the content of a file does not match a given regular expression.
      #deleteIfEmpty()
        ✓ Deletes directories if they are empty.
        ✓ Avoids deleting non-empty directories.
      #isEmptyDir()
        ✓ Detects if a given directory is empty.
        ✓ Detects if a given directory is not empty.
      #copy()
        ✓ Copies files
        ✓ Copies directories
        ✓ Uses patterns to exclude files from being copied.
        ✓ Supports wildcards
        ✓ Allows copying files with literal regexp-like characters
        ✓ Supports copying a list of files
      #rename()
        ✓ Moves/renames files (59ms)
        ✓ Moves/renames directories
        ✓ Moves/renames directories inside already existing directories
      #backup()
        ✓ Creates backups of files
      File ownership
        #getOwnerAndGroup()
          ✓ Properly reads file ownership
      #permissions()
        ✓ Properly reads foile permissions
      #chmod()
        ✓ Changes files permissions
        ✓ Changes folders permissions
        ✓ Changes permissions recursively attending to if it is a file or a directory
      #setAttrs()
        ✓ Modifies the attributes of a file.
      #getAttrs()
        ✓ Gets the attributes of a file.
        ✓ Gets the attributes of a directory.
      #mtime()
        ✓ Gets the modification time of a file.
      #eachLine()
        ✓ Gets the modification time of a file.
        ✓ Allows early-aborting iterating over lines
      $file.ini
        #get()
          ✓ Gets values from .ini files.
        #set()
          ✓ Sets values in .ini files, new parameter in the global section
          ✓ Sets values in .ini files, new parameter in a existing section
          ✓ Sets values in .ini files, new parameter and section.
          ✓ Sets values in .ini files, overriding existing parameters
      $file.xml
        #get()
          ✓ Gets values from .xml files.
        #set()
          ✓ Creates attributes for existing nodes in .xml files
          ✓ Modifies the value of existing attributes .xml files
          ✓ Deletes attributes for existing nodes in .xml files
          ✓ Modifies text nodes in .xml files
          ✓ Replaces nodes by text nodes in .xml files
          ✓ Deletes nodes in .xml files
          ✓ Accepts a function as value for directly operate over the node object
          ✓ Throws an error when using invalid calls
      $file.yaml
        #get()
          ✓ Convert all the file to an object
          ✓ Returns default value when key not exists
          ✓ Gets lists, dictionaries and combinations of them
          ✓ Gets inner keys
          ✓ Infers types
        #set()
          ✓ Adds parameter to root
          ✓ Updates value on root
          ✓ Adds inner key
          ✓ Replaces inner key
          ✓ Replaces inner key (starting key with '/')
          ✓ Adds keymap
          ✓ Creates a file if it does not exist
          ✓ Throw exception if wrong parameters
          ✓ Throw exception if key in array format is incorrect
    $file package contextified
      #link()
        ✓ Creates link to absolute paths
        ✓ Creates link to relative paths
        ✓ Creates broken links to absolute paths
        ✓ Creates broken links to relative paths
      #delete()
        ✓ Deletes individual files
        ✓ Deletes directories
        ✓ Do not delete directories if told not to
        ✓ Do not delete non-empty directories if told not to
        ✓ Returns true when the path was deleted and false otherwise
        ✓ Supports providing a list
        ✓ Supports providing patterns
        ✓ Allows deleting files with literal regexp-like characters
        ✓ When providing multiple patterns, only returns true if all were deleted
        ✓ It resolves relative paths
      #read()
        ✓ Reads files
        ✓ It resolves relative paths
      #write()
        ✓ Writes files (71ms)
        ✓ Writes files with relative paths  (50ms)
        ✓ Write file under non-existent dir (60ms)
        ✓ Write file under non-existent dir with relative paths  (189ms)
      #substitute()
        ✓ Resolves relative paths
        ✓ Substitutes exact patterns, 1st way
        ✓ Substitutes exact patterns, 2nd way
        ✓ Substitutes exact patterns, 3rd way
        ✓ Substitutes exact patterns with global matching, 1st way
        ✓ Substitutes exact patterns with global matching, 2nd way
        ✓ Substitutes exact patterns with global matching, 3rd way
        ✓ Substitutes exact patterns recursively, 1st way
        ✓ Substitutes exact patterns recursively, 2nd way
        ✓ Substitutes exact patterns recursively, 3rd way
        ✓ Substitutes regexp patterns, 1st way
        ✓ Substitutes regexp patterns, 3rd way
        ✓ Substitutes regexp patterns recursively, 1st way
        ✓ Substitutes regexp patterns recursively, 3rd way
        ✓ Only follows symlinks in a directory if followSymLinks is true
        ✓ Allows excluding files from the substitutions
        ✓ Raises an error when wrong syntax is used
        Supports configuring the 'global' attribute
          ✓ $file.substitute(file, pattern, value) form
          ✓ $file.substitute(file, {a: b}) form
          ✓ $file.substitute(file, [{pattern: a, value: b}]) form
      #relativize()
        ✓ Relativizes a path within a given prefix
      #sanitize()
        ✓ Sanitizes a path, converting it into an unix-like path
      #listDir()
        ✓ Lists the directory content as Unix's `find` would do
        ✓ Lists the directory content, removing the prefix
      #glob()
        ✓ Lists the directory content matching a glob-like pattern
        ✓ Allows excluding files from the results
        ✓ Lists the directory content matching a glob-like pattern, changing the working directory
        ✓ Lists the directory content matching multiple glob-like patterns
      #append()
        ✓ Appends text to existing files
        ✓ Appends text to existing files, with newline
        ✓ Appends text to non-existing files
      #prepend()
        ✓ Prepends text to existing files
        ✓ Prepends text to non-existing files
      #puts()
        ✓ Appends text to existing files with trailing newline
        ✓ Appends text to existing files, with newline before and after
        ✓ Appends text to non-existing files with trailing newline
      #stripPath()
        ✓ Returns the path removing "n" parent path elements.
      #walkDir()
        ✓ Navigate through directory contents
        ✓ Allows early-aborting listing contents
        ✓ The loop is only aborted if maxDepth is reached
        ✓ The loop is only aborted for a exact 'false' boolean value
      File access checks
        #executable()
          ✓ Checks if a file is executable by the current user.
          ✓ Returns false for non-existent files
        #executableBy()
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
          ✓ Checks if a file is executable by a different user. (47ms)
          ✓ Returns false for non-existent files
          ✓ Properly checks if root has access
        #executableByOthers()
          ✓ Checks if a file is executable by "others"
          ✓ Returns false for non-existent files
        #readable()
          ✓ Checks if a file is readable by the current user.
          ✓ Checks if a file is not readable by the current user.
        #readableBy()
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
          ✓ Checks if a file is readable by a different user (50ms)
        #readableByOthers()
          ✓ Checks if a file is readable by "others"
        #writable()
          ✓ Checks if a file is writable by the current user.
          ✓ Checks if a file is not writable by the current user.
          ✓ Checks the parent directory if it does not exists
        #writableBy()
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
          ✓ Checks if a file is writable by a different user (60ms)
          ✓ Root can always write
          ✓ Properly checks if writable by the current user
[runProgram] Executing internal command: groups ["daemon"]
[runProgram] Executing internal command: groups ["daemon"]
          ✓ Checks the parent directory if it does not exists
        #writableByOthers()
          ✓ Checks if a file is writable by "others"
      #exists()
        ✓ Checks if a file exists.
        ✓ Checks if a file does not exist.
        ✓ Throws an error if cannot detect if exists or not
      #size()
        ✓ Gets the size of a given file.
      #matches()
        ✓ Checks if file path matches a pattern
        ✓ Checks if file path matches excluding pattern
        ✓ Checks if file path matches a pattern (relative path works)
        ✓ Properly resolves different glob matching patters
      #dirname()
        ✓ Gets the parent directory of a specified file/directory.
      #basename()
        ✓ Gets the basename of a file.
      #touch()
        ✓ Creates empty file if it does not exist.
        ✓ Modifies the access/modification time of a file. (2003ms)
      #split()
        ✓ Gets an array with the elements in the path.
      #join()
        ✓ Gets path from an array of components
        ✓ Gets path from an list of arguments
      #mkdir()
        ✓ Create directory if it does not exist.
        ✓ Throws an error if the path exists and it is a file.
      #normalize()
        ✓ Absolutizes a relative path, expanding the "~" character
      #isLink()
        ✓ Detects if a file is a symbolic link.
        ✓ Detects if a file is not a symbolic link.
      #isDirectory()
        ✓ Detects if a given path is a directory.
        ✓ Detects if a given path is a not a directory.
      #isFile()
        ✓ Detects if a given path is a file.
        ✓ Detects if a given path is not a file.
      #isBinary()
        ✓ Detects if a given file is binary.
        ✓ Detects if a file is not binary.
      #contains()
        ✓ Detects if the content of a file contains a given string.
        ✓ Detects if the content of a file does not contain a given string.
        ✓ Detects if the content of a file matches a given regular expression.
        ✓ Detects if the content of a file does not match a given regular expression.
      #deleteIfEmpty()
        ✓ Deletes directories if they are empty.
        ✓ Avoids deleting non-empty directories.
      #isEmptyDir()
        ✓ Detects if a given directory is empty.
        ✓ Detects if a given directory is not empty.
      #copy()
        ✓ Copies files (47ms)
        ✓ Copies directories (76ms)
        ✓ Uses patterns to exclude files from being copied.
        ✓ Supports wildcards
        ✓ Allows copying files with literal regexp-like characters
        ✓ Supports copying a list of files
      #rename()
        ✓ Moves/renames files (73ms)
        ✓ Moves/renames directories
        ✓ Moves/renames directories inside already existing directories
      #backup()
        ✓ Creates backups of files
      File ownership
        #getOwnerAndGroup()
          ✓ Properly reads file ownership
      #permissions()
        ✓ Properly reads foile permissions
      #chmod()
        ✓ Changes files permissions
        ✓ Changes folders permissions
        ✓ Changes permissions recursively attending to if it is a file or a directory
      #setAttrs()
        ✓ Modifies the attributes of a file.
      #getAttrs()
        ✓ Gets the attributes of a file.
        ✓ Gets the attributes of a directory.
      #mtime()
        ✓ Gets the modification time of a file.
      #eachLine()
        ✓ Gets the modification time of a file.
        ✓ Allows early-aborting iterating over lines
      $file.ini
        #get()
          ✓ Gets values from .ini files.
        #set()
          ✓ Sets values in .ini files, new parameter in the global section
          ✓ Sets values in .ini files, new parameter in a existing section
          ✓ Sets values in .ini files, new parameter and section.
          ✓ Sets values in .ini files, overriding existing parameters
      $file.xml
        #get()
          ✓ Gets values from .xml files.
        #set()
          ✓ Creates attributes for existing nodes in .xml files
          ✓ Modifies the value of existing attributes .xml files
          ✓ Deletes attributes for existing nodes in .xml files
          ✓ Modifies text nodes in .xml files
          ✓ Replaces nodes by text nodes in .xml files
          ✓ Deletes nodes in .xml files
          ✓ Accepts a function as value for directly operate over the node object
          ✓ Throws an error when using invalid calls
      $file.yaml
        #get()
          ✓ Convert all the file to an object
          ✓ Returns default value when key not exists
          ✓ Gets lists, dictionaries and combinations of them
          ✓ Gets inner keys
          ✓ Infers types
        #set()
          ✓ Adds parameter to root
          ✓ Updates value on root
          ✓ Adds inner key
          ✓ Replaces inner key
          ✓ Replaces inner key (starting key with '/')
          ✓ Adds keymap
          ✓ Creates a file if it does not exist
          ✓ Throw exception if wrong parameters
          ✓ Throw exception if key in array format is incorrect

  Lodash Extra
    Safe methods
      ✓ #isArray()
      ✓ #isSymbol()
      ✓ #isBoolean()
      ✓ #isNumber()
      ✓ #isUndefined()
      ✓ #isObject()
      ✓ #isPlainObject()
      ✓ #isFinite()
      ✓ #isNaN()
      ✓ #noop()
      ✓ #xor()
      ✓ #take()
      ✓ #takeRight()
      ✓ #isNull()
      ✓ #isInteger()
      ✓ #isRegExp()
      ✓ #isString()
      ✓ #isError()
      ✓ #isFunction()
      ✓ #values()
      ✓ #keys()
      ✓ #compact()
      ✓ #assign()
      ✓ #first()
      ✓ #last()
      ✓ #capitalize()
      ✓ #difference()
      ✓ #once()
      ✓ #includes()
      ✓ #omit()
      ✓ #union()
      ✓ #toArray()
      ✓ #uniq()
      ✓ #uniqBy()
      ✓ #any()
      ✓ #identity()
      ✓ #startsWith()
      ✓ #endsWith()
      ✓ #trimStart()
      ✓ #trimEnd()

  $net package
    #isPortInUse()
      ✓ Detects a port is not in use
      ✓ Detects a port is in use
      ✓ Throws on malformed non-numeric ports
      ✓ Throws on out of range ports
      ✓ Does not throw on valid ports (47ms)
    #canBindToPort()
      ✓ It can bind to a given free port
      ✓ Cannot bind to a taken port
      ✓ Cannot bind to a privileged port as non-root
      ✓ Throws on malformed non-numeric ports
      ✓ Throws on out of range ports
      ✓ Does not throw on valid ports
    #waitForPort()
      ✓ Waits for free port
      ✓ Waits for bound port (I)
      ✓ Waits for bound port (II)
[runProgram] Executing internal command: sleep [1]
      ✓ Returns false on timeout waiting port to be free (I) (1043ms)
[runProgram] Executing internal command: sleep [1]
      ✓ Returns false on timeout waiting port to be free (II) (1037ms)
[runProgram] Executing internal command: sleep [1]
      ✓ Returns false on timeout waiting port to be bound (I) (1034ms)
[runProgram] Executing internal command: sleep [1]
      ✓ Returns false on timeout waiting port to be bound (II) (1032ms)

  $os package
    #runProgram()
[runProgram] Executing internal command: ls []
[runProgram] Executing internal command: echo ["foo"]
      ✓ Executes simple cmd successfully
      ✓ Executes simple cmd providing arguments as string
[runProgram] Executing internal command: echo ["-n","this","\"is\"","{","a","}","test"]
      ✓ Executes simple cmd providing arguments as array
      ✓ By default, fails when command fails
      ✓ Provide a default error message if the process do not write to stderr
      ✓ Can be configured to capture std streams and never fail
      ✓ Do not reports any default stderr message if the process did not write to it when retrieving std streams
      Failure management
[runProgram] Executing internal command: /tmp/tmp-118653DaoIwemXv7sK/run.sh []
XXXXXXXXXXXXXXXXXXXXXXXXXXXXX
{ code: null,
  stderr: '',
  stdout: '',
  child: 
   { status: null,
     signal: 'SIGKILL',
     output: [ null, <Buffer >, <Buffer > ],
     pid: 118798,
     stdout: <Buffer >,
     stderr: <Buffer >,
     envPairs: 
      [ 'LESSOPEN=| /usr/bin/lesspipe %s',
        'npm_config_cache_lock_stale=60000',
        'HISTTIMEFORMAT=%F %T ',
        'npm_config_legacy_bundling=',
        'npm_config_sign_git_tag=',
        'MAIL=/var/mail/bitnami',
        'SSH_CLIENT=10.10.0.252 58665 22',
        'USER=bitnami',
        'npm_config_user_agent=npm/3.10.10 node/v6.11.0 linux x64',
        'npm_config_always_auth=',
        'npm_package_bugs_url=https://github.com/bitnami/nami-utils/issues',
        'npm_config_bin_links=true',
        'npm_config_key=',
        'npm_package_scripts_ci_lint=gulp ci-lint',
        'npm_package_dependencies_stack_trace=^0.0.9',
        'npm_package_devDependencies_gulp=^3.9.1',
        'npm_config_description=true',
        'npm_config_fetch_retries=2',
        'npm_config_heading=npm',
        'npm_config_if_present=',
        'npm_config_init_version=1.0.0',
        'npm_config_user=1000',
        'npm_node_execpath=/home/bitnami/.nvm/versions/node/v6.11.0/bin/node',
        'SHLVL=1',
        'npm_package_devDependencies_bitnami_gulp_common_tasks=github:bitnami/gulp-common-tasks#v2.0.2',
        'OLDPWD=/home/bitnami/projects/nami',
        'RBENV_ROOT=/opt/runtimes/rbenv',
        'HOME=/home/bitnami',
        'npm_package_scripts_cpd=gulp cpd',
        'npm_config_force=',
        'SSH_TTY=/dev/pts/10',
        'NVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist',
        'NVM_BIN=/home/bitnami/.nvm/versions/node/v6.11.0/bin',
        'npm_config_only=',
        'npm_package_devDependencies_chai=^3.5.0',
        'npm_package_devDependencies_chai_fs=^1.0.0',
        'npm_config_cache_min=10',
        'npm_config_init_license=ISC',
        'npm_package_dependencies_glob=^7.0.5',
        'npm_package_dependencies_handlebars=^4.0.5',
        'npm_package_dependencies_xregexp=^3.1.1',
        'npm_config_editor=vi',
        'npm_config_rollback=true',
        'npm_config_tag_version_prefix=v',
        'npm_config_cache_max=Infinity',
        'npm_config_userconfig=/home/bitnami/.npmrc',
        'npm_config_engine_strict=',
        'npm_config_init_author_name=',
        'npm_config_init_author_url=',
        'npm_config_tmp=/tmp',
        'npm_package_description=Utility functions for Nami',
        'npm_package_dependencies_isbinaryfile=^3.0.0',
        'npm_package_dependencies_xmldom=^0.1.22',
        'npm_config_depth=Infinity',
        'npm_config_save_dev=',
        'npm_config_usage=',
        'NVM_PATH=/home/bitnami/.nvm/versions/node/v6.11.0/lib/node',
        'NVM_DIR=/home/bitnami/.nvm',
        'npm_package_scripts_ci_test=gulp ci-test',
        'npm_package_readmeFilename=README.md',
        'npm_package_homepage=https://github.com/bitnami/nami-utils#readme',
        'npm_config_cafile=',
        'npm_config_progress=true',
        'npm_config_https_proxy=',
        'npm_config_onload_script=',
        'LOGNAME=bitnami',
        'npm_package_dependencies_tail=^1.2.0',
        'npm_package_devDependencies_eslint_plugin_import=^1.14.0',
        'npm_config_rebuild_bundle=true',
        'npm_config_save_bundle=',
        'npm_config_shell=/bin/bash',
        '_=/home/bitnami/.nvm/versions/node/v6.11.0/bin/npm',
        'npm_config_dry_run=',
        'npm_config_prefix=/home/bitnami/.nvm/versions/node/v6.11.0',
        'npm_package_scripts_lint=gulp lint',
        'npm_config_browser=',
        'npm_config_cache_lock_wait=10000',
        'npm_config_registry=https://registry.npmjs.org/',
        'npm_config_save_optional=',
        'npm_config_scope=',
        'npm_config_searchopts=',
        'npm_config_versions=',
        'TERM=xterm-256color',
        'npm_package_devDependencies_tmp=0.0.28',
        'npm_config_cache=/home/bitnami/.npm',
        'npm_config_proxy=',
        'AUTOJUMP_ERROR_PATH=/home/bitnami/.local/share/autojump/errors.log',
        'RBENV_SHELL=bash',
        'npm_config_global_style=',
        'npm_config_ignore_scripts=',
        'npm_config_searchsort=name',
        'npm_config_version=',
        'npm_package_dependencies_deasync=^0.1.7',
        'npm_package_dependencies_fs_extra=^0.30.0',
        'npm_config_local_address=',
        'npm_config_viewer=man',
        'PATH=/home/bitnami/.nvm/versions/node/v6.11.0/lib/node_modules/npm/bin/node-gyp-bin:/home/bitnami/projects/nami/github/nami-utils/node_modules/.bin:/home/bitnami/.nvm/versions/node/v6.11.0/bin:/home/bitnami/bin:/home/bitnami/.local/bin:/home/bitnami/bin:/home/bitnami/projects/go-projects/bin:/usr/local/go/bin:/opt/google-cloud-sdk/bin:/home/bitnami/go/bin:/usr/local/go/bin:/usr/local/arcanist/bin:/opt/runtimes/rbenv/shims:/opt/runtimes/rbenv/bin:/opt/runtimes/node/bin:/opt/google-cloud-sdk/bin:/home/bitnami/go/bin:/usr/local/go/bin:/usr/local/arcanist/bin:/opt/runtimes/rbenv/shims:/opt/runtimes/rbenv/bin:/opt/runtimes/node/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games',
        'NVM_IOJS_ORG_MIRROR=https://iojs.org/dist',
        'npm_package_name=nami-utils',
        'npm_package_repository_type=git',
        ... 74 more items ],
     options: 
      { env: [Object],
        file: '/tmp/tmp-118653DaoIwemXv7sK/run.sh',
        args: [Object],
        envPairs: [Object],
        stdio: [Object] },
     args: [ '/tmp/tmp-118653DaoIwemXv7sK/run.sh' ],
     file: '/tmp/tmp-118653DaoIwemXv7sK/run.sh' } }
        1) Properly reports exit code on killed processes
      Std streams handing
        ✓ Supports providing files as stdout and stderr
      Running programs as different users
        - Supports the runAs property or the uid to execute as a different user
        - Supports executing commands with different gid and uid
    #spawnAsync()
      ✓ Executes processes in background (1009ms)
      ✓ Allows to set a timeout for the process to finish before continuing (1511ms)
      ✓ Allows to throw an error if the timeout is due (1511ms)
      ✓ Allows to stop the process using the handler (209ms)
      ✓ Allows to kill the process using the handler (208ms)
      ✓ Allows to access process output (508ms)
      ✓ Allows to write the output to a file (511ms)
      ✓ Allows to handle standard streams using callbacks (508ms)
      ✓ Allows to execute commands from a specified directory (508ms)
    #isPlatform()
      ✓ It detects the current platform
      ✓ It detects the current platform inlcuding architecture
      ✓ It returns false if the platform does not match
    #isUnix()
      ✓ Detects is running on Unix
    #findInPath()
      ✓ Finds binaries in the path (256ms)
      ✓ Returns null if cannot find the binary
    #isInPath()
      ✓ Returns true for binaries in the path
      ✓ Returns false for binaries not in the path
    #pidFind()
      ✓ Detects running process (120ms)
      ✓ Does not detect a non existing process (134ms)
    #ps()
      ✓ Finds by pid (121ms)
      ✓ Filter using hash (123ms)
      ✓ Returns all running processes when called without arguments (127ms)
      ✓ Filters using a function (119ms)
      ✓ Fails providing a wrong filterer (123ms)
    File ownership
      #getUid()
        ✓ getUid from current user
      #getGid()
        ✓ getGid from current group
      #groupExists()
        ✓ groupExists of current group is true
[runProgram] Executing internal command: getent ["group","nonexistentgroup"]
        ✓ non-existent group returns false
      #userExists()
        ✓ userExists of current user is true
[runProgram] Executing internal command: getent ["passwd","nonexistentuser"]
        ✓ non-existent user returns false
      #getUsername()
        ✓ getUsername from current user
      #getGroupname()
        ✓ getGid from current group
    #getUserGroups()
      - Get specific user groups
    #findUser()
      ✓ Return user data
    #findGroup()
      ✓ Return group data
    System users and group management
      #deleteGroup()
        - Deletes a group
        - Works regardless of a broken PATH
      #addGroup()
        - Adds a group
        - Works regardless of a broken PATH
      #addUser()
        - Adds an user
        - Adds a system user
        - Works regardless of a broken PATH
      #deleteUser()
        - Deletes an user
        - Works regardless of a broken PATH
    #pidFind()
      ✓ Fins its own pid (117ms)
      ✓ Returns false for non-existent pids (116ms)
    #kill()
      ✓ Sends signals to a running process (214ms)
      ✓ Allows checking the status using the 0 signal (207ms)
    #runningAsRoot()
      ✓ Returns false when running as non-root
    #createTempFile()
      ✓ Creates temporary paths
      ✓ Allows marking the temportary paths to not be deleted
    #createTempDir()
      ✓ Creates temporary paths
      ✓ Allows marking the temportary paths to not be deleted

  $hb package
    #renderText()
      ✓ Resolves ubstitutions
      ✓ By default, do not escape strings
    #render()
      ✓ Resolves ubstitutions
    #renderToFile()
      ✓ Resolves ubstitutions

  $util package non-contextified
    #sleep()
[runProgram] Executing internal command: sleep [2]
      ✓ Sleeps a int number of seconds (2009ms)
[runProgram] Executing internal command: sleep [1.5]
      ✓ Sleeps a float number of seconds (1508ms)
      ✓ Reports an error on malformed time specification
    #tail()
      ✓ Returns the last 10 lines of a file by default
      ✓ Allows configuring the number of lines to return
      ✓ Providing more lines than the total amount of lines retrieves the full text
      ✓ Providing negative or invalid line number returns the default max lines
      ✓ Allows providing an offset
      ✓ Returns empty when tailing a non-existent file or a non-file
      ✓ Allows following by lines (204ms)
      ✓ Allows providing a callback

  #retryWhile()
    ✓ Fails if not passing a function
    ✓ Fails if step is not a finite number
    ✓ Fails if timeout is not a finite number or Infinity
[runProgram] Executing internal command: sleep [0.1]
[runProgram] Executing internal command: sleep [0.1]
[runProgram] Executing internal command: sleep [0.1]
    ✓ Returns false if timeout (324ms)
[runProgram] Executing internal command: sleep [0.1]
[runProgram] Executing internal command: sleep [0.1]
[runProgram] Executing internal command: sleep [0.1]
[runProgram] Executing internal command: sleep [0.1]
[runProgram] Executing internal command: sleep [0.1]
    ✓ Returns true if expected result on time (540ms)

  $util package contextified
    #sleep()
[runProgram] Executing internal command: sleep [2]
      ✓ Sleeps a int number of seconds (2009ms)
[runProgram] Executing internal command: sleep [1.5]
      ✓ Sleeps a float number of seconds (1508ms)
      ✓ Reports an error on malformed time specification
    #tail()
      ✓ Returns the last 10 lines of a file by default
      ✓ Allows configuring the number of lines to return
      ✓ Providing more lines than the total amount of lines retrieves the full text
      ✓ Providing negative or invalid line number returns the default max lines
      ✓ Allows providing an offset
      ✓ Returns empty when tailing a non-existent file or a non-file
      ✓ Allows following by lines (202ms)
      ✓ Allows providing a callback

  #retryWhile()
    ✓ Fails if not passing a function
    ✓ Fails if step is not a finite number
    ✓ Fails if timeout is not a finite number or Infinity
[runProgram] Executing internal command: sleep [0.1]
[runProgram] Executing internal command: sleep [0.1]
[runProgram] Executing internal command: sleep [0.1]
    ✓ Returns false if timeout (322ms)
[runProgram] Executing internal command: sleep [0.1]
[runProgram] Executing internal command: sleep [0.1]
[runProgram] Executing internal command: sleep [0.1]
[runProgram] Executing internal command: sleep [0.1]
[runProgram] Executing internal command: sleep [0.1]
    ✓ Returns true if expected result on time (538ms)


  491 passing (31s)
  12 pending
  1 failing

  1) $os package #runProgram() Failure management Properly reports exit code on killed processes:
     Uncaught AssertionError: expected { code: null, stdout: '', stderr: '' } to deeply equal 137
      at ChildProcess.<anonymous> (test/os.js:22:1164)
      at process.nextTick (internal/child_process.js:758:12)
      at _combinedTickCallback (internal/process/next_tick.js:73:7)
      at process._tickDomainCallback (internal/process/next_tick.js:128:9)



